name: C++ CI

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4

      - name: get GTests
        run: git submodule update --init

      - name: Set up CMake
        uses: jwlawson/actions-setup-cmake@v1

      - name: Run CMake
        run: cmake -H. -B_build -DBUILD_TESTS=ON

      - name: Build project
        run: cmake --build _build --config Release

      - name: Run tests
        run: ./_build/check

      - name: Build and package on Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm
          cmake --build _build --config Release
          cpack -G DEB --config _build/CPackConfig.cmake
          cpack -G RPM --config _build/CPackConfig.cmake
        shell: bash

      - name: Build and package on macOS
        if: matrix.os == 'macos-latest'
        run: |
          cmake --build _build --config Release
          cpack -G DragNDrop --config _build/CPackConfig.cmake
        shell: bash

      - name: Upload Release Assets
        uses: actions/upload-artifact@v3
        with:
          name: packages
          path: |
            *.deb
            *.rpm
            *.dmg

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload DEB
        if: matrix.os == 'ubuntu-latest' && startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./*.deb
          asset_name: $(basename ./*.deb)
          asset_content_type: application/octet-stream

      - name: Upload RPM
        if: matrix.os == 'ubuntu-latest' && startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./*.rpm
          asset_name: $(basename ./*.rpm)
          asset_content_type: application/octet-stream

      - name: Upload DMG
        if: matrix.os == 'macos-latest' && startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./*.dmg
          asset_name: $(basename ./*.dmg)
          asset_content_type: application/octet-stream
